@inject UsersServices usersServices
@inject NewsServices newsServices
@inject ContactsServices contactsServices

@layout _Layout
@page "/news"

<PageTitle>Fileworx: News Page</PageTitle>

<!DOCTYPE html>
<html>
    <head>

    </head>

     <body>
         <div class="pt-[40px]">
        <div class="flex justify-start bg-gray-50 border-gray-200 border-1 align-items-stretch mb-1.5">

            @if (!newsServices.SendingMode)
            {
                <div class="flex align-middle align-items-stretch ml-3">
                    <button @onclick=sendFilesRequest class="bg-transparent hover:text-fw-blue-hover text-xl rounded-md mr-2 text-fw-blue py-1.5 px-2 cursor-pointer"><b>Send Files</b></button>
                    <button @onclick=addNewsRequest class="bg-transparent hover:text-fw-blue-hover text-xl rounded-md mr-2 text-fw-blue py-1.5 px-2 cursor-pointer"><b>Add News</b></button>
                    <button @onclick=addImageRequest class="bg-transparent hover:text-fw-blue-hover text-xl rounded-md mr-2 text-fw-blue py-1.5 px-2 cursor-pointer"><b>Add Image</b></button>
                    <button @onclick="editRequest" class="@editButtonClass()" disabled="@removeAndEditDisable()"><b>Edit Image/News</b></button>
                    <button @onclick="removeRequest" class="@removeButtonClass()" disabled="@removeAndEditDisable()"><b>Remove </b></button>
                </div>


                <div class="ml-auto">
                    <select @bind="querySource" class="p-2.5 border-solid border-gray-300 border-2 rounded-3xl">
                        <option value="Elasticsearch">Elasticsearch</option>
                        <option value="Database">Database</option>
                    </select>
                    <button @onclick="changeQuerySourceRequest" class="bg-fw-blue hover:bg-fw-blue-hover rounded-md mr-2 text-white p-1 cursor-pointer ml-1 justify-end">
                        <b>Refresh</b>
                    </button>
                </div>
            }

            else
            {
                <div class="flex align-middle align-items-stretch ml-3">
                    <button @onclick=cancelSendingRequest class="bg-transparent hover:text-fw-blue-hover text-xl rounded-md mr-2 text-fw-blue py-1.5 px-2 cursor-pointer"><b>Cancel</b></button>

                    <button @onclick=sendToRequest class="bg-transparent hover:text-fw-blue-hover text-xl rounded-md mr-2 text-fw-blue py-1.5 px-2 cursor-pointer"><b>Send To</b></button>
                </div>
            }

        </div>


        <div class="flex justify-between">
            @if (refreshList)
            {
                <div class="flex-grow w-[500px] mr-10 max-h-[700px] overflow-y-auto">
                    <FilesList OnRowClick="OnRowClick"> </FilesList>
                </div>
            }
            else
            {
                <div class="flex-grow w-[500px] mr-10 max-h-[700px] overflow-y-auto">
                    <FilesList OnRowClick="OnRowClick"> </FilesList>
                </div>
            }


            <div class="flex-grow w-full ">
                @if (showdetails)
                {
                    <NewsDetails selectedFile="newsServices.SelectedFile" />
                }
            </div>

        </div>

        @if (showAddNewsWindow)
        {
            <AddNewsWindow OnSave="onAddNews" OnCancel="onCancel"> </AddNewsWindow>
        }
        @if (showAddImageWindow)
        {
            <AddImageWindow OnSave="onAddImage" OnCancel="onCancel"> </AddImageWindow>
        }
        @if (showDeleteConfirmationWindow)
        {
            <DeleteConfirmationWindow OnDelete="onConfirmDelete" OnCancel="onCancel"></DeleteConfirmationWindow>
        }
        @if (showEditNewsWindow)
        {
            <AddNewsWindow OnSave="onEditNews" OnCancel="onCancel" NewsToEdit="(clsNews) newsServices.SelectedFile"> </AddNewsWindow>
        }
        @if (showEditImageWindow)
        {
            <EditImageWindow OnSave="onEditImage" OnCancel="onCancel"> </EditImageWindow>
        }
        @if (showFileErrorWindow)
        {
            <Error Title="Error" Message="an Error Ocured during process, make sure not to use sprcial characters" OnClose="onCloseErrorRequest"></Error>
        }
        @if (showSendToWindow)
        {
            <SendToWindow OnCancel="onCancel" OnSend="onSend"></SendToWindow>
        }
    </div>
    </body>
</html>

@code {

    private string querySource { get; set; } = "Elasticsearch";

    // Windows Appearance
    private bool showAddNewsWindow = false;
    private bool showAddImageWindow = false;
    private bool showDeleteConfirmationWindow = false;
    private bool showEditNewsWindow = false;
    private bool showEditImageWindow = false;
    private bool showFileErrorWindow = false;
    private bool showSendToWindow = false;

    private bool refreshList = false;

    private bool disableSendToButton = true;

    // Details Appearance
    private bool showdetails = true;

    //Delete Confirmation
    private bool confirmDelete = false;


    protected async override Task OnInitializedAsync()
    {
        // Add all contacts to the service
        await contactsServices.AddDBContactsToContactsList();

        // UI Action
        newsServices.MessagesHandling.UIAction += refreshFilesList;

        // Start Listening to RX File Messages
        newsServices.MessagesHandling.StartListeningToRxFileMessages();

        // Add DB Files to AllFiles List
        await newsServices.AddDBFilesToFilesList();

        // Refresh list
        await refreshFilesList();

        // Pass refresh ListView to the serviece
        newsServices.RefreshFilesListRequested += refreshFilesList;

        // UI
        newsServices.SelectedFile = newsServices.AllFiles[0];
    }

    //------------------------ Buttons Requests ------------------------//

    private void sendToRequest()
    {
        showSendToWindow = true;
    }

    private void removeRequest()
    {
        showDeleteConfirmationWindow = true;
    }

    private void sendFilesRequest()
    {
        newsServices.SendingMode = true;
    }

    private void cancelSendingRequest()
    {
        newsServices.SendingMode = false;
        newsServices.CheckedFiles.Clear();
    }

    private void addNewsRequest()
    {
        showAddNewsWindow = true;
    }

    private void addImageRequest()
    {
        showAddImageWindow = true;
    }

    private void editRequest()
    {
        if (newsServices.SelectedFile is clsPhoto)
        {
            showEditImageWindow = true;
        }

        else
        {
            showEditNewsWindow = true;
        }
    }

    private void onCloseErrorRequest()
    {
        showFileErrorWindow = false;
    }

    private async Task changeQuerySourceRequest()
    {
        newsServices.QuerySource = (querySource == "Elasticsearch") ? QuerySource.ES : QuerySource.DB;
        await newsServices.RefreshFilesList();
    }

    //------------------------ Passed EventCallBacks ------------------------//

    private void OnRowClick(clsFile selectedFile)
    {
        if (newsServices.SelectedFile == selectedFile)
        {
            newsServices.SelectedFile = null; // Deselect the row if it's already selected
        }

        else
        {
            newsServices.SelectedFile = selectedFile; // Select the clicked row
        }
    }

    private void onCancel()
    {
        showAddNewsWindow = false;
        showAddImageWindow = false;

        showDeleteConfirmationWindow = false;
        confirmDelete = false;

        showEditNewsWindow = false;
        showEditImageWindow = false;

        showSendToWindow = false;
    }

    private void onSend()
    {
        foreach (var contact in contactsServices.CheckedContacts)
        {
            foreach (var file in newsServices.CheckedFiles)
            {
                clsMessage txMessage = new clsMessage()
                {
                        Id = Guid.NewGuid(),
                        Command = MessagesCommands.TxFile,
                        Contact = Global.MapContactToContactDto(contact),
                        ActionDate = DateTime.Now,
                };

                if (file is clsNews)
                {
                    txMessage.NewsDto = Global.MapNewsToNewsDto((clsNews)file);
                }

                else
                {
                    txMessage.PhotoDto = Global.MapPhotoToPhotoDto((clsPhoto)file);
                }
                newsServices.MessagesHandling.SendTxFileMessage(txMessage);
            }
        }

        contactsServices.CheckedContacts.Clear();
        newsServices.CheckedFiles.Clear();

        showSendToWindow = false;
        newsServices.SendingMode = false;
    }

    private async Task onConfirmDelete()
    {
        confirmDelete = true;

        if (newsServices.SelectedFile != null)
        {
            if (newsServices.SelectedFile is clsPhoto)
            {
                clsPhoto selectedPhoto = (clsPhoto)newsServices.SelectedFile;

                await selectedPhoto.DeleteAsync();
            }

            else
            {
                clsNews selectedNews = (clsNews)newsServices.SelectedFile;

                await selectedNews.DeleteAsync();
            }
            newsServices.SelectedFile = null;
            await newsServices.RefreshFilesList();
        }

        confirmDelete = false;
        showDeleteConfirmationWindow = false;
    }

    private async Task onAddNews(clsNews addedNews)
    {
        try
        {
            await addedNews.InsertAsync();
            await newsServices.RefreshFilesList();

            showAddNewsWindow = false;
        }
        catch
        {
            showFileErrorWindow = true;
        }

    }

    private async Task onEditNews(clsNews editedNews)
    {
        try
        {
            await editedNews.UpdateAsync();
            await newsServices.RefreshFilesList();

            showEditNewsWindow = false;
        }
        catch
        {
            showFileErrorWindow = true;
        }
    }

    private async Task onAddImage(clsPhoto addedPhoto)
    {
        try
        {
            await addedPhoto.InsertAsync();
            await newsServices.RefreshFilesList();

            showAddImageWindow = false;
        }

        catch
        {
            showFileErrorWindow = true;
        }

    }

    private async Task onEditImage(clsPhoto editedPhoto)
    {
        try
        {
            await editedPhoto.UpdateAsync();
            await newsServices.RefreshFilesList();

            showEditImageWindow = false;
        }

        catch
        {
            showFileErrorWindow = true;
        }
    }

    //------------------------ Other Methods ------------------------//

    private async Task refreshFilesList()
    {
        refreshList = !refreshList;
        // Notify Blazor to re-render the component on the UI thread
        await InvokeAsync(new Action(() => StateHasChanged()));
    }

    //------------------------ Classes and Disable ------------------------//

    private string removeButtonClass()
    {
        if (newsServices.SelectedFile != null)
        {
            return "bg-transparent hover:text-rid-hover text-xl rounded-md mr-2 text-rid py-1.5 px-2 cursor-pointer";
        }
        else
        {
            return "bg-transparent text-xl rounded-md mr-2 text-disable py-1.5 px-2 cursor-pointer";
        }
    }

    private string editButtonClass()
    {
        if (newsServices.SelectedFile != null)
        {
            return "bg-transparent hover:text-fw-blue-hover text-xl rounded-md mr-2 text-fw-blue py-1.5 px-2 cursor-pointer";
        }
        else
        {
            return "bg-transparent text-xl rounded-md mr-2 text-disable py-1.5 px-2 cursor-pointer";
        }
    }

    private bool removeAndEditDisable()
    {
        if (newsServices.SelectedFile != null)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    private bool sendToDisable()
    {
        if (contactsServices.CheckedContacts.Count > 0)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

}