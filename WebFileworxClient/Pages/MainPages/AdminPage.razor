@inject UsersServices usersServices
@inject NavigationManager navnManager
@layout _Layout
@page "/admin"

<PageTitle>Fileworx: Admin Page</PageTitle>

<div class="pt-[40px]">



        <div class="flex justify-start bg-gray-50 border-gray-200 border-1 align-items-stretch mb-1.5 mt-1">

            <div class="flex-1 flex align-middle align-items-stretch ml-3 ">
                <button @onclick="addUserRequest" class="bg-transparent hover:text-fw-blue-hover text-xl rounded-md mr-2 text-fw-blue py-1.5 px-2 cursor-pointer"><b>Add User</b></button>
                <button @onclick="editUserRequest" class="@editButtonClass()" disabled="@removeAndEditDisable()"><b>Edit User</b></button>
                <button @onclick="deleteUserRequest" class="@removeButtonClass()" disabled="@removeAndEditDisable()"><b>Remove User</b></button>
            </div>


            <div class="ml-auto">
                <select @bind="querySource" class="p-2.5 border-solid border-gray-300 border-2 rounded-3xl">
                    <option value="Elasticsearch">Elasticsearch</option>
                    <option value="Database">Database</option>
                </select>
                <button @onclick="changeQuerySource" class="bg-fw-blue hover:bg-fw-blue-hover rounded-md mr-2 text-white p-1 cursor-pointer ml-1 justify-end">
                    <b>Refresh</b>
                </button>
            </div>


        </div>


    <div class="t">
        <UsersTable OnRowClick="OnRowClick" />
    </div>

    @if (showAddUserWindow)
    {
        <AddUserWindow OnSave="onAddUser" OnCancel="onCancel"></AddUserWindow>
    }
    @if (showDeleteUserConfirmation)
    {
        <UserDeleteConfirmationWindow OnDelete="onRemoveUser" OnCancel="onCancel"></UserDeleteConfirmationWindow>
    }
    @if (showEditUserWindow)
    {
        <AddUserWindow OnSave="onAddUser" OnCancel="onCancel" UserToEdit="usersServices.SelectedUser"></AddUserWindow>
    }
    @if (showDuplicatedUsernameErrorWindow)
    {
        <Error Title="Duplicated Username" Message="This username is used try another one" OnClose="onCloseErrorWindow"></Error>
    }
    @if (showDeleteAdminErrorWindow)
    {
        <Error Title="Admin Delete Attempt" Message="You can not delete the admin username" OnClose="onCloseErrorWindow"></Error>
    }
    @if (showFileErrorWindow)
    {
        <Error Title="Error" Message="an Error Ocured during process, make sure not to use sprcial characters" OnClose="onCloseError"></Error>
    }

</div>

@code {

    private string querySource { get; set; } = "Elasticsearch";

    // Display
    private bool showAddUserWindow = false;
    private bool showEditUserWindow = false;
    private bool showDeleteUserConfirmation = false;
    private bool showDuplicatedUsernameErrorWindow = false;
    private bool showDeleteAdminErrorWindow = false;
    private bool showFileErrorWindow = false;

    private async Task changeQuerySource()
    {
        usersServices.QuerySource = (querySource == "Elasticsearch") ? QuerySource.ES : QuerySource.DB;
        await usersServices.RefreshUsersList();
    }

    private async Task onRemoveUser()
    {
        if (usersServices.SelectedUser != null)
        {
            await usersServices.SelectedUser.DeleteAsync();
            usersServices.SelectedUser = null;

            await usersServices.RefreshUsersList();
        }

        showDeleteUserConfirmation = false;
    }

    private void editUserRequest()
    {
        showEditUserWindow = true;
    }

    private void deleteUserRequest()
    {
        if (usersServices.SelectedUser.Username == "admin")
            showDeleteAdminErrorWindow = true;

        else
            showDeleteUserConfirmation = true;
    }

    private void addUserRequest()
    {
        showAddUserWindow = true;
    }

    private void onCancel()
    {
        showAddUserWindow = false;
        showDeleteUserConfirmation = false;
        showEditUserWindow = false;
    }

    private async Task onAddUser(clsUser addedUser)
    {
        try
        {
            await addedUser.InsertAsync();
            await usersServices.RefreshUsersList();

            showAddUserWindow = false;
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("Duplicated username"))
                showDuplicatedUsernameErrorWindow = true;

            else
                showFileErrorWindow = true;

        }
    }

    private async Task onEditUser(clsUser editedUser)
    {
        try
        {
            await editedUser.UpdateAsync();
            await usersServices.RefreshUsersList();

            showEditUserWindow = false;
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("Duplicated username"))
                showDuplicatedUsernameErrorWindow = true;

            else
                showFileErrorWindow = true;

        }

    }

    private void onCloseErrorWindow()
    {
        showDuplicatedUsernameErrorWindow = false;
        showDeleteAdminErrorWindow = false;
    }
    
    private void onCloseError()
    {
        showFileErrorWindow = false;
    }

    private string editButtonClass()
    {
        if (usersServices.SelectedUser != null)
        {
            return "bg-transparent hover:text-fw-blue-hover text-xl rounded-md mr-2 text-fw-blue py-1.5 px-2 cursor-pointer";
        }
        else
        {
            return "bg-transparent text-xl rounded-md mr-2 text-disable py-1.5 px-2 cursor-pointer";
        }
    }

    private bool removeAndEditDisable()
    {
        if (usersServices.SelectedUser != null)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    private string removeButtonClass()
    {
        if (usersServices.SelectedUser != null)
        {
            return "bg-transparent hover:text-rid-hover text-xl rounded-md mr-2 text-rid py-1.5 px-2 cursor-pointer";
        }
        else
        {
            return "bg-transparent text-xl rounded-md mr-2 text-disable py-1.5 px-2 cursor-pointer";
        }
    }

    private void OnRowClick(clsUser user)
    {
        if (usersServices.SelectedUser == user)
        {
            usersServices.SelectedUser = null; // Deselect the row if it's already selected
        }
        
        else
        {
            usersServices.SelectedUser = user; // Select the clicked row
        }
    }
}
