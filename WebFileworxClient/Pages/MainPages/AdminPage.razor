@inject UsersServices usersServices
@inject NavigationManager navnManager

@page "/admin"

<PageTitle>Users Maneger</PageTitle>
<img class="mb-2.5 w-72" src="images/download.png" alt="download" />

<div class="flex mt-1">
    <button @onclick="addUserRequest" class="bg-fw-blue hover:bg-fw-blue-hover rounded-md mr-2 text-white p-1 cursor-pointer"><b>Add User</b></button>
    <button @onclick="editUserRequest" class="@editButtonClass()" disabled="@removeAndEditDisable()"><b>Edit User</b></button>
    <button @onclick="deleteUserRequest" class="@removeButtonClass()" disabled="@removeAndEditDisable()"><b>Remove User</b></button>
        </div>

        <div class="t">
            <UsersTable OnRowClick="OnRowClick"/>
        </div>

@if (showAddUserWindow)
{
    <AddUserWindow OnSave="onAddUser" OnCancel="onCancel"></AddUserWindow>
}
@if (showDeleteUserConfirmation)
{
    <UserDeleteConfirmationWindow OnDelete="onRemoveUser" OnCancel="onCancel"></UserDeleteConfirmationWindow>
}
@if (showEditUserWindow)
{
    <EditUserWindow OnSave="onEditUser" OnCancel="onCancel"></EditUserWindow>
}
@if (showDuplicatedUsernameErrorWindow)
{
    <Error Title="Duplicated Username" Message="This username is used try another one" OnClose="onCloseErrorWindow"></Error>
}
@if (showDeleteAdminErrorWindow)
{
    <Error Title="Admin Delete Attempt" Message="You can not delete the admin username" OnClose="onCloseErrorWindow"></Error>
}
@if (showFileErrorWindow)
{
    <Error Title="Error" Message="an Error Ocured during process, make sure not to use sprcial characters" OnClose="onCloseError"></Error>
}

@code {

    // Display
    private bool showAddUserWindow = false;
    private bool showEditUserWindow = false;
    private bool showDeleteUserConfirmation = false;
    private bool showDuplicatedUsernameErrorWindow = false;
    private bool showDeleteAdminErrorWindow = false;
    private bool showFileErrorWindow = false;

    private async Task onRemoveUser()
    {
        if (usersServices.SelectedUser != null)
        {
            await usersServices.SelectedUser.DeleteAsync();
            usersServices.SelectedUser = null;

            usersServices.RefreshUsersList();
        }

        showDeleteUserConfirmation = false;
    }

    private void editUserRequest()
    {
        showEditUserWindow = true;
    }

    private void deleteUserRequest()
    {
        if (usersServices.SelectedUser.Username == "admin")
            showDeleteAdminErrorWindow = true;

        else
            showDeleteUserConfirmation = true;
    }

    private void addUserRequest()
    {
        showAddUserWindow = true;
    }

    private void onCancel()
    {
        showAddUserWindow = false;
        showDeleteUserConfirmation = false;
        showEditUserWindow = false;
    }

    private async Task onAddUser(clsUser addedUser)
    {
        try
        {
            await addedUser.InsertAsync();
            usersServices.RefreshUsersList();

            showAddUserWindow = false;
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("Duplicated username"))
                showDuplicatedUsernameErrorWindow = true;

            else
                showFileErrorWindow = true;

        }
    }

    private async Task onEditUser(clsUser editedUser)
    {
        try
        {
            await editedUser.UpdateAsync();
            usersServices.RefreshUsersList();

            showEditUserWindow = false;
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("Duplicated username"))
                showDuplicatedUsernameErrorWindow = true;

            else
                showFileErrorWindow = true;

        }

    }

    private void onCloseErrorWindow()
    {
        showDuplicatedUsernameErrorWindow = false;
        showDeleteAdminErrorWindow = false;
    }
    
    private void onCloseError()
    {
        showFileErrorWindow = false;
    }

    private string editButtonClass()
    {
        if (usersServices.SelectedUser != null)
        {
            return "bg-fw-blue hover:bg-fw-blue-hover rounded-md mr-2 text-white p-1 cursor-pointer";
        }
        else
        {
            return "bg-disable rounded-md mr-2 text-white p-1 cursor-default";
        }
    }

    private bool removeAndEditDisable()
    {
        if (usersServices.SelectedUser != null)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    private string removeButtonClass()
    {
        if (usersServices.SelectedUser != null)
        {
            return "bg-rid hover:bg-rid-hover rounded-md mr-2 text-white p-1 cursor-pointer";
        }
        else
        {
            return "bg-disable rounded-md mr-2 text-white p-1 cursor-default";
        }
    }

    private void OnRowClick(clsUser user)
    {
        if (usersServices.SelectedUser == user)
        {
            usersServices.SelectedUser = null; // Deselect the row if it's already selected
        }
        
        else
        {
            usersServices.SelectedUser = user; // Select the clicked row
        }
    }
}
